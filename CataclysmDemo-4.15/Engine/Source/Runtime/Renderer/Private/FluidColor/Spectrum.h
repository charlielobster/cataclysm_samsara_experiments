#pragma once
#include "Tuple3.h"

static double CIE_1931_CMF[][3] = {
	//CIE (1931) 2-deg color matching functions
	//360 to 780 step 5 nm
	{ 0.000130, 0.000004, 0.000606 },
	{ 0.000232, 0.000007, 0.001086 },
	{ 0.000415, 0.000012, 0.001946 },
	{ 0.000742, 0.000022, 0.003486 },
	{ 0.001368, 0.000039, 0.006450 },
	{ 0.002236, 0.000064, 0.010550 },
	{ 0.004243, 0.000120, 0.020050 },
	{ 0.007650, 0.000217, 0.036210 },
	{ 0.014310, 0.000396, 0.067850 },
	{ 0.023190, 0.000640, 0.110200 },
	{ 0.043510, 0.001210, 0.207400 },
	{ 0.077630, 0.002180, 0.371300 },
	{ 0.134380, 0.004000, 0.645600 },
	{ 0.214770, 0.007300, 1.039050 },
	{ 0.283900, 0.011600, 1.385600 },
	{ 0.328500, 0.016840, 1.622960 },
	{ 0.348280, 0.023000, 1.747060 },
	{ 0.348060, 0.029800, 1.782600 },
	{ 0.336200, 0.038000, 1.772110 },
	{ 0.318700, 0.048000, 1.744100 },
	{ 0.290800, 0.060000, 1.669200 },
	{ 0.251100, 0.073900, 1.528100 },
	{ 0.195360, 0.090980, 1.287640 },
	{ 0.142100, 0.112600, 1.041900 },
	{ 0.095640, 0.139020, 0.812950 },
	{ 0.057950, 0.169300, 0.616200 },
	{ 0.032010, 0.208020, 0.465180 },
	{ 0.014700, 0.258600, 0.353300 },
	{ 0.004900, 0.323000, 0.272000 },
	{ 0.002400, 0.407300, 0.212300 },
	{ 0.009300, 0.503000, 0.158200 },
	{ 0.029100, 0.608200, 0.111700 },
	{ 0.063270, 0.710000, 0.078250 },
	{ 0.109600, 0.793200, 0.057250 },
	{ 0.165500, 0.862000, 0.042160 },
	{ 0.225750, 0.914850, 0.029840 },
	{ 0.290400, 0.954000, 0.020300 },
	{ 0.359700, 0.980300, 0.013400 },
	{ 0.433450, 0.994950, 0.008750 },
	{ 0.512050, 1.000000, 0.005750 },
	{ 0.594500, 0.995000, 0.003900 },
	{ 0.678400, 0.978600, 0.002750 },
	{ 0.762100, 0.952000, 0.002100 },
	{ 0.842500, 0.915400, 0.001800 },
	{ 0.916300, 0.870000, 0.001650 },
	{ 0.978600, 0.816300, 0.001400 },
	{ 1.026300, 0.757000, 0.001100 },
	{ 1.056700, 0.694900, 0.001000 },
	{ 1.062200, 0.631000, 0.000800 },
	{ 1.045600, 0.566800, 0.000600 },
	{ 1.002600, 0.503000, 0.000340 },
	{ 0.938400, 0.441200, 0.000240 },
	{ 0.854450, 0.381000, 0.000190 },
	{ 0.751400, 0.321000, 0.000100 },
	{ 0.642400, 0.265000, 0.000050 },
	{ 0.541900, 0.217000, 0.000030 },
	{ 0.447900, 0.175000, 0.000020 },
	{ 0.360800, 0.138200, 0.000010 },
	{ 0.283500, 0.107000, 0.000000 },
	{ 0.218700, 0.081600, 0.000000 },
	{ 0.164900, 0.061000, 0.000000 },
	{ 0.121200, 0.044580, 0.000000 },
	{ 0.087400, 0.032000, 0.000000 },
	{ 0.063600, 0.023200, 0.000000 },
	{ 0.046770, 0.017000, 0.000000 },
	{ 0.032900, 0.011920, 0.000000 },
	{ 0.022700, 0.008210, 0.000000 },
	{ 0.015840, 0.005723, 0.000000 },
	{ 0.011359, 0.004102, 0.000000 },
	{ 0.008111, 0.002929, 0.000000 },
	{ 0.005790, 0.002091, 0.000000 },
	{ 0.004109, 0.001484, 0.000000 },
	{ 0.002899, 0.001047, 0.000000 },
	{ 0.002049, 0.000740, 0.000000 },
	{ 0.001440, 0.000520, 0.000000 },
	{ 0.001000, 0.000361, 0.000000 },
	{ 0.000690, 0.000249, 0.000000 },
	{ 0.000476, 0.000172, 0.000000 },
	{ 0.000332, 0.000120, 0.000000 },
	{ 0.000235, 0.000085, 0.000000 },
	{ 0.000166, 0.000060, 0.000000 },
	{ 0.000117, 0.000042, 0.000000 },
	{ 0.000083, 0.000030, 0.000000 },
	{ 0.000059, 0.000021, 0.000000 },
	{ 0.000042, 0.000015, 0.000000 },
};

static double D65[] = {
	//D65
	//360 to 780 step 5 nm
	46.6383,
	49.3637,
	52.0891,
	51.0323,
	49.9755,
	52.3118,
	54.6482,
	68.7015,
	82.7549,
	87.1204,
	91.486,
	92.4589,
	93.4318,
	90.057,
	86.6823,
	95.7736,
	104.865,
	110.936,
	117.008,
	117.41,
	117.812,
	116.336,
	114.861,
	115.392,
	115.923,
	112.367,
	108.811,
	109.082,
	109.354,
	108.578,
	107.802,
	106.296,
	104.79,
	106.239,
	107.689,
	106.047,
	104.405,
	104.225,
	104.046,
	102.023,
	100,
	98.1671,
	96.3342,
	96.0611,
	95.788,
	92.2368,
	88.6856,
	89.3459,
	90.0062,
	89.8026,
	89.5991,
	88.6489,
	87.6987,
	85.4936,
	83.2886,
	83.4939,
	83.6992,
	81.863,
	80.0268,
	80.1207,
	80.2146,
	81.2462,
	82.2778,
	80.281,
	78.2842,
	74.0027,
	69.7213,
	70.6652,
	71.6091,
	72.979,
	74.349,
	67.9765,
	61.604,
	65.7448,
	69.8856,
	72.4863,
	75.087,
	69.3398,
	63.5927,
	55.0054,
	46.4182,
	56.6118,
	66.8054,
	65.0941,
	63.3828,
};

class VisSpectrum
{
public:
	static const int LambdaMin = 360;
	static const int LambdaMax = 780;
	static const int LambdaStep = 5;
	static const int LambdaCount = 1 + (LambdaMax - LambdaMin) / LambdaStep;

	static inline double GetLambda(int i)
	{
		return (LambdaMin + i * LambdaStep);
	}

	//spectrum must be in SI units (Watt/m^2/sr/nm)
	static Tuple3d ComputeXYZ_Emissive(const double* spectrum)
	{
		Tuple3d res;
		for (int i = 0; i < LambdaCount; ++i)
		{
			res += spectrum[i] * Tuple3d(CIE_1931_CMF[i]);
		}
		res *= LambdaStep;
		res *= 683.0; //convert Radiance (Watt/m^2/sr) to Luminance (cd/m^2)
		return res;
	}

	static Tuple3d ComputeXYZ_D65(const double* spectrum)
	{
		Tuple3d res;
		double norm = 0.0f;
		for (int i = 0; i < LambdaCount; ++i)
		{
			Tuple3d xyz(CIE_1931_CMF[i]);
			res += xyz * (spectrum[i] * D65[i]);
			norm += xyz[1] * D65[i];
		}
		res /= norm;
		return res;
	}
};

class RegSpectralCurve
{
public:
	RegSpectralCurve(const double* data, double beg, double end, double step)
		: _data(data), _beg(beg), _end(end), _step(step) {}

	double operator() (double lambda) const {
		if (lambda < _beg || lambda > _end) return 0.0f;
		double x = (lambda - _beg) / _step;
		double xf = floor(x);
		x -= xf;
		int xi = int(xf);
		return (x > 0.0)
			? _data[xi] * (1.0 - x) + _data[xi + 1] * x
			: _data[xi];
	}

private:
	const double* _data;
	double _beg, _end, _step;
};

template <typename Real>
Tuple3<Real> xyY_to_XYZ(const Tuple3<Real>& xyY)
{
	const Real Y = xyY[2];
	Tuple3<Real> XYZ(
		xyY[0] * Y / xyY[1],
		Y,
		(1.0 - xyY[0] - xyY[1]) * Y / xyY[1]
	);
	return XYZ;
}

template <typename Real>
Tuple3<Real> XYZ_to_sRGB(const Tuple3<Real>& XYZ)
{
	Tuple3<Real> colorRGB(
		dot(Tuple3<Real>( 3.2404542, -1.5371385, -0.4985314), XYZ),
		dot(Tuple3<Real>(-0.9692660,  1.8760108,  0.0415560), XYZ),
		dot(Tuple3<Real>( 0.0556434, -0.2040259,  1.0572252), XYZ)
	);
	return max(colorRGB, 0.0);
}

template <typename Real>
Real sRGB_to_Y(const Tuple3<Real>& RGB)
{
	return dot(Tuple3<Real>(0.2126729, 0.7151522, 0.0721750), RGB);
}
